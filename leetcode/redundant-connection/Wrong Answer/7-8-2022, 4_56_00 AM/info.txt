{"id":741436082,"lang":"python3","lang_name":"Python3","time":"4Â months","timestamp":1657248960,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/741436082/","is_pending":"Not Pending","title":"Redundant Connection","memory":"N/A","code":"class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n       d=defaultdict(list)\n       visit=set()\n       loop=set()\n       for u,v in edges:\n            d[u].append(v)\n            d[v].append(u)\n       def dfs(root):\n          q=[root]\n          while q:\n                temroot=q.pop(0)\n                tem=[]\n                for i in d[temroot]:\n                    if len(tem)==2:return tem\n                    if i in visit:  tem.append(i)\n                    if i in q:return [temroot,i]\n                    else:q.append(i)\n                visit.add(temroot)\n          return [-1]\n       for i,j in edges:\n            if i not in visit:\n                m= dfs(i)\n                if m!=[-1]:return m\n       return [-1]\n\n\n\n\n\n# if element in loop:return element\n          # if element in visit:return -1\n          # loop.add(element);visit.add(element)\n          # for child in d[element]:\n          #       if dfs(child):return  [element,child]\n          # loop.remove(element)\n          # return False","compare_result":"100100000010000000000000000000000000000","title_slug":"redundant-connection","has_notes":false,"notes":"","topic_tags":[]}