{"id":741448187,"lang":"python3","lang_name":"Python3","time":"4Â months","timestamp":1657250359,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/741448187/","is_pending":"Not Pending","title":"Redundant Connection","memory":"N/A","code":"class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        visit=set();l=[]\n        for i,j in edges:\n            if i in visit and j in visit:\n                l.append([i,j])\n            else:\n                visit.add(i);visit.add(j)\n        return l[-1]\n#        d=defaultdict(list)\n#        visit=set()\n#        loop=set()\n#        for u,v in edges:\n#             d[u].append(v)\n#             d[v].append(u)\n       \n#        def dfs(root):\n       \n                \n#        for i,j in edges:\n#             if i not in visit:\n#                 m= dfs(i)\n#                 if m!=[-1]:return m\n#        return [-1]\n#  # if root in visit\n#  #        visit.add(root)\n#  #            for i in d[root]:\n#  #                if i in visit:continue\n#  #                tem.append(root)\n#  #                dfs(i)\n#  #                tem.remove(root)\n\n# # temroot=q.pop()\n# #                 tem=set()\n# #                 for i in d[temroot]:\n# #                     if len(tem)==2:return [temroot,i]\n# #                     if i in visit: tem.add(i)\n# #                     else:q.append(i)\n# #                 visit.add(temroot)\n# #           return [-1]\n\n\n# # if element in loop:return element\n#           # if element in visit:return -1\n#           # loop.add(element);visit.add(element)\n#           # for child in d[element]:\n#           #       if dfs(child):return  [element,child]\n#           # loop.remove(element)\n#           # return False","compare_result":"111111111111111111000110000000000010000","title_slug":"redundant-connection","has_notes":false,"notes":"","topic_tags":[]}