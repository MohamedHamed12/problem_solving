{"id":756877738,"lang":"python","lang_name":"Python","time":"3 months, 1 week","timestamp":1658807558,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/756877738/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"N/A","code":"class Solution(object):\n    def minCostConnectPoints(self, points):\n        class sol:\n            def __init__(self,n ):\n                self.parent=[i for i in range(n+1)]\n                self.rank=[0]*(n+1)\n                self.totalW=0\n            def find (self,x):\n                if x!=self.parent[x]:\n                    self.parent[x]=self.find(self.parent[x])\n                return self.parent[x]\n            def union (self,x,y):\n                xroot=self.find(x)\n                yroot=self.find(y)\n                if xroot==yroot:return\n                if self.rank[xroot]==self.rank[yroot]:\n                    self.parent[xroot]=yroot\n                    self.rank[yroot]+=1\n                elif self.rank[xroot]>self.rank[yroot]:\n                    self.parent[yroot]=xroot\n                else:\n                    self.parent[xroot]=yroot\n            def kruskals(self,l):\n                l.sort(key=lambda x: x[2])\n                for u,v,w in l:\n                    if self.find(u)==self.find(v):\n                        continue\n                    else:\n                        self.union(u,v)\n                        self.totalW+=w\n                return self.totalW\n\n        s=sol(len(points))\n        l=[]\n        for u,p1 in enumerate(points):\n            for  v,p2  in enumerate(points):\n                x1,y1=p1\n                x2,y2=p2\n                dis=abs(x1-x2+y1-y2)\n                l.append([u,v,dis])\n        res = s.kruskals(l)\n        return res\n","compare_result":"010111000000000000000000000000000000000000000000000000000000000000000000","title_slug":"min-cost-to-connect-all-points","has_notes":false,"notes":"","topic_tags":[]}