{"id":728594010,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1655914928,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/728594010/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n       l=[]\n       def getnodes(root):\n            nonlocal l\n            if  root :\n                 \n        \n                if root.left:\n                    getnodes(root.left)\n                l.append(root.val)\n                if root.right:\n                    getnodes(root.right)\n      \n       getnodes(root)\n       if l==sorted(l):\n          return True\n       else :\n            return False\n#                 m =self.isValidBST(root.left)\n             \n\n\n#             if root.right:\n#                 if root.right.val<=root.val:\n#                     return False\n#                 n=self.isValidBST(root.right)\n#             m=n=True\n#             if not root :\n#                 return True\n        \n#             if root.left:\n#                 if root.left.val>=root.val:\n#                     return False\n                    \n#                 m =self.isValidBST(root.left)\n             \n\n\n#             if root.right:\n#                 if root.right.val<=root.val:\n#                     return False\n#                 n=self.isValidBST(root.right)\n               \n#             return  m and n","compare_result":"11110001111111111011111111111111111111110111111111111111101111000011111111111001","title_slug":"validate-binary-search-tree","has_notes":false,"notes":"","topic_tags":[]}