{"id":761690199,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1659291017,"status":10,"status_display":"Accepted","runtime":"2955 ms","url":"/submissions/detail/761690199/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"30.9 MB","code":"class BITTree:\n\t\"\"\"\n\tImplementation of Binary Indexed Tree/Fenwick Tree\n\n\tTime:\n\t\tcreate:  O(n*log(n))\n\t\tupdate:  O(log(n))\n\t\tget_sum: O(log(n))\n\tMemory: O(n)\n\t\"\"\"\n\n\tdef __init__(self, nums: List[int]):\n\t\tself.bi_tree = [0] * (len(nums) + 1)\n\t\tself.n = len(nums)\n\t\tfor i in range(self.n):\n\t\t\tself.update(i + 1, nums[i])\n\n\tdef update(self, index: int, value: int):\n\t\twhile index <= self.n:\n\t\t\tself.bi_tree[index] += value\n\t\t\tindex += self.low_bit(index)\n\n\tdef get_sum(self, index: int) -> int:\n\t\tprefix = 0\n\t\twhile index > 0:\n\t\t\tprefix += self.bi_tree[index]\n\t\t\tindex -= self.low_bit(index)\n\t\treturn prefix\n\n\t@staticmethod\n\tdef low_bit(bit: int) -> int:\n\t\treturn bit & -bit\n\n\nclass NumArray:\n\n\tdef __init__(self, nums: List[int]):\n\t\tself.nums = nums\n\t\tself.bi_tree = BITTree(nums)\n\n\tdef update(self, i: int, val: int):\n\t\tself.bi_tree.update(i + 1, val - self.nums[i])\n\t\tself.nums[i] = val\n\n\tdef sumRange(self, left: int, right: int) -> int:\n\t\treturn self.bi_tree.get_sum(right + 1) - self.bi_tree.get_sum(left)\n# class NumArray:\n#     nums = []\n#     s = 0\n#     l = 0\n    \n#     def __init__(self, nums: List[int]):\n#         self.nums = nums\n#         self.s = sum(nums)\n#         self.l = len(nums)\n\n#     def update(self, index: int, val: int) -> None:\n#         self.s -= self.nums[index]\n#         self.nums[index] = val\n#         self.s += self.nums[index]\n\n#     def sumRange(self, left: int, right: int) -> int:\n#         if right - left > self.l // 2:\n#             ans = sum(self.nums[:left]) + sum(self.nums[right + 1:])\n#             return self.s - ans\n#         else:\n#             return sum(self.nums[left: right + 1])\n\n# class NumArray:\n\n#     def __init__(self, nums: List[int]):\n#         self.num=nums\n#         tem=0\n#         self.s=[0]\n#         for i in range(len(nums)):\n#             tem+= self.num[i]\n#             self.s.append(tem)\n            \n            \n         \n        \n\n#     def update(self, index: int, val: int) -> None:\n#         brev=self.num[index]\n#         self.num[index]=val\n#         m=val-brev\n#         for i in range(index+1,len(self.s)):\n#             self.s[i]+=m\n        \n\n#     def sumRange(self, left: int, right: int) -> int:\n#         return self.s[right+1]-self.s[left]\n#                 # return sum(self.num[left:right+1])\n\n        \n\n\n# # Your NumArray object will be instantiated and called as such:\n# # obj = NumArray(nums)\n# # obj.update(index,val)\n# # param_2 = obj.sumRange(left,right)","compare_result":"111111111111111","title_slug":"range-sum-query-mutable","has_notes":false,"notes":"","topic_tags":[]}