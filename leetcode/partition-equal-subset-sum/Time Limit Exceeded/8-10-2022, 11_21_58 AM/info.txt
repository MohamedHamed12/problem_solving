{"id":770087782,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1660123318,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/770087782/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution:\n    def canPartition(self, l: List[int]) -> bool:\n        s=sum(l)\n        if (s//2)*2!=s:return False\n        t=s//2\n        for mask in range(1<<len(l)):\n            tem=0\n            for j in range(mask.bit_length()+1):\n                if mask &(1<<j):tem+=l[j]\n            if tem==t:return True\n        return False\n#         st=set()\n#         s=sum(l)\n#         if (s//2)*2!=s:return False\n#         t=s//2\n#         st=set([0])\n#         # for i in l:st.add(i)\n#         for i in l:\n#             tem=st.copy()\n#             for j in tem:\n#                 st.add(i+j)\n#                 if i+j ==t:return True\n                \n            \n#         return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        # dp=[False]*(1+s//2)\n#         def  dfs(ind ,tem):\n#              if ind >=len(dp):return \n#              for i in range(len(tem)):\n#                 if ind+tem[i] <len(dp) :\n#                     dp[ind+tem[i]]=True\n#                     dfs(ind+tem[i],tem[:i]+tem[i+1:])\n            \n#         dfs(0,l)\n#         return dp[-1]","compare_result":"1111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-equal-subset-sum","has_notes":false,"notes":"","topic_tags":[]}