{"id":715045801,"lang":"python3","lang_name":"Python3","time":"5Â months","timestamp":1654442953,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/715045801/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"13.9 MB","code":"# class Solution:\n#     def minMaxGame(self, nums) :\n\n#         # x1=[]\n#         # for i in nums:\n#         #     if i%2==0:\n#         if len(nums)==1:\n#             # print(nums[0])\n#             return nums[0]\n\n#         x1=[]\n#         tem=int(len(nums)/2)\n#         for i in range(tem) :\n\n#             if i%2==0:\n#                 x1.append(min(nums[2*i],nums[2*i+1]))\n#             else:\n#                  x1.append(max(nums[2*i],nums[2*i+1]))\n#         return self.minMaxGame(x1)\n# # l=list(map(int,input().split()))\n# # l=[1,3,5,2,4,8,2,2]\n# # l=[3]\n# while True:             # Loop continuously\n#     inp = input() # Get the input\n#     if inp == \"\":       # If it is a blank line...\n#         break\n#     l=list(int(i) for i in inp if  i.isdigit())\n#     s=Solution()\n#     print(s.minMaxGame(l))\n# class Solution:\n#     def partitionArray(self, nums, k):\n#         nums = sorted(nums,reverse=True)\n#         j = 0\n#         tot = 1\n#         for i in range(len(nums)):\n#             if nums[j]-nums[i] <= k:\n#                 pass\n#             else:\n#                 j = i\n#                 tot += 1\n#         return tot\n\n\n# # l=list(map(int,input().split()))\n# l = [3, 6, 1, 2, 5]\n# s = Solution()\n# print(s.partitionArray(l, 2))\n# from operator import le\n\n\n# class Solution:\n# def arrayChange(self, nums, operations ) :\n#     nums=sorted(nums);n=len(nums)\n#     operations=sorted(operations);op=len(operations)\n#     i=j=0\n#     while i<n and j<op:\n#         if nums[i]== operations[j][0]:\n#             nums[i]=operations[j][1]\n#             j+=1\n#             i+=1\n#         elif nums[i]> operations[j][0]:\n#             j+=1\n#         elif nums[i]<operations[j][0]:\n#             i+=1\n#     return nums\n\n\n# l=[1,2,3,6,5]\n# print(l.index(3))\n# print(sorted( [[1,3],[8,7],[6,1]]))\n# class Solution:\n#     def arrayChange(self, nums, operations) :\n#         d={}\n#         for i ,j in reversed(operations) :\n#             if j not in d:\n\n#                 d[i]=j\n#             else:\n#                 i\n# d = {}\n# # l=[1,2,4,6]\n\n# operations=[[1,3],[3,7],[6,1]]\n# for s, e in reversed(operations):\n# \t\td[s] = d.get(e,e)\n#         \t\t# d[s] = d[e] if e in d else e\n\n# print(d)\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        tot1 = 0\n        tot2 = 0\n        n1 = 1\n        n2 = 1\n        while l1:\n            tem = n1*l1.val\n            tot1 += tem\n            l1 = l1.next\n            n1*=10\n        while l2:\n            tem = n2*l2.val\n            tot2 += tem\n            l2 = l2.next\n            n2 *= 10\n        tot1 += tot2\n        return self.createlink(tot1)\n\n    def createlink(self, tot1):\n        # head = ListNode()\n        # tem = head\n        b = True\n        for i in reversed(str(tot1)):\n            if b:\n                h = ListNode(int(i))\n                tem = h\n                b = False\n            else:\n                tem2 = ListNode(int(i))\n                tem.next = tem2\n                tem = tem2\n        return h\n\n\ns = Solution()\nh = s.createlink(942)\nm = s.createlink(9465)\nt = s.addTwoNumbers(h, m)\n# while h:\n#     print(h.val)\n#     h = h.next\n\nwhile t:\n    print(t.val, end=\"\")\n    t = t.next\nprint()\n","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"notes":"","topic_tags":[]}