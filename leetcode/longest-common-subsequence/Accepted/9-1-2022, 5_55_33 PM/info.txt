{"id":788922850,"lang":"python3","lang_name":"Python3","time":"2Â months","timestamp":1662047733,"status":10,"status_display":"Accepted","runtime":"984 ms","url":"/submissions/detail/788922850/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"22 MB","code":"class Solution:\n    def longestCommonSubsequence(self, a: str, b: str) -> int:\n#             dp = [[0] * (len(text2) + 1) for i in range(len(text1) + 1)]\n        \n#             for i in range(1, len(text1) + 1):\n#                 for j in range(1, len(text2) + 1):\n\n#                     if text1[i-1] == text2[j-1]:\n#                         dp[i][j] = dp[i-1][j-1] + 1\n#                     else:\n#                         dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n#             return dp[-1][-1]\n       n=len(a)\n       m=len(b)\n       dp=[[-float('inf')]*(m+1) for i in range(n+1) ]\n\n       for i in range(n+1):\n            for j in range(m+1):\n                if i==0 or j==0: dp[i][j]=0\n                elif a[i-1] == b[j-1]:dp[i][j]=dp[i-1][j-1]+1\n                else:dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n       # print(f'Case #1: you can visit at most {dp[-1][-1]} cities.')\n       return dp[-1][-1]","compare_result":"111111111111111111111111111111111111111111111","title_slug":"longest-common-subsequence","has_notes":false,"notes":"","topic_tags":[]}