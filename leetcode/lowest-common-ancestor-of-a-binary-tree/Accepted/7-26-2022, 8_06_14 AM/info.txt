{"id":756969732,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1658815574,"status":10,"status_display":"Accepted","runtime":"139 ms","url":"/submissions/detail/756969732/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"26.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, r: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \n        def rec(root):\n            if root in [p,q,None]:return root\n            l,r=rec(root.left),rec(root.right)\n            if l and r: return root\n            if l or r:return l or r\n        return rec(r)\n        \n#         tem=[p,q]\n#         ans\n        \n#         def rec\n#         if not root: return \n#         if root.val==p :\n  \n#         if root.val==q\n#         else:\n#             self.rec(root.left)\n#             self.rec(root.left)\n#         if root.val==p : \n#            if self.rec(root.left,q) or self.rec(root.right,q):return self.val\n#         else:root.val==p : \n            \n#             if self.rec(root.left,q) or self.rec(root.right,q):return self.val\n            ","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"notes":"","topic_tags":[]}