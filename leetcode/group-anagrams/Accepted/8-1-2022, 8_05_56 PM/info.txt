{"id":762561063,"lang":"python3","lang_name":"Python3","time":"3Â months","timestamp":1659377156,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/762561063/","is_pending":"Not Pending","title":"Group Anagrams","memory":"21.7 MB","code":"from collections import Counter, defaultdict\n\nclass Solution:\n    def groupAnagrams(self, l: List[str]) -> List[List[str]]:\n        d=defaultdict(list)\n\n        for i in l:\n            d[tuple(sorted(Counter(i).items()))].append(i)\n        tem=[]\n        for i in d:\n            tem.append(d[i])\n        return tem\n        \n#    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n#         d = collections.defaultdict(list)\n#         for s in strs:\n#             h = [0]*26\n#             for c in s:\n#                 h[ord(c) - ord('a')] += 1\n#             d[tuple(h)].append(s)\n        \n        # return the list of the values of the dictionary\n        # each value represent the list of words with the same characters counting\n        # if two words have the same characters counting they have the same anagram\n        return list(d.values())\n\n# class Solution:\n#     def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n#         i=0\n#         tot=[]\n#         while strs:\n#             tem=[strs.pop(0)]\n#             j=0\n#             while j<len(strs):\n#                 if  sorted(list(strs[j]))== sorted(list(tem[0])):\n#                     tem.append(strs.pop(j))\n#                 else:j+=1\n#             tot.append(tem)\n#         return tot\n\n#                 # i+=1","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"notes":"","topic_tags":[]}