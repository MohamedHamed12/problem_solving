{"id":772446058,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1660376511,"status":10,"status_display":"Accepted","runtime":"226 ms","url":"/submissions/detail/772446058/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31.7 MB","code":"class Trienode:\n    def __init__(self):\n        self.childern={}\n        self.end=False\nclass Trie:\n\n    def __init__(self):\n        self.root=Trienode()\n\n    def insert(self, word: str) -> None:\n        cur =self.root\n        for c in word:\n            if c not in cur.childern:\n                cur.childern[c]=Trienode()\n            cur=cur.childern[c]\n        cur.end=True\n\n    def search(self, word: str) -> bool:\n        cur =self.root\n        for c in word:\n            if c not in cur.childern:return False\n            cur=cur.childern[c]\n        return cur.end\n\n    def startsWith(self, prefix: str) -> bool:\n            cur=self.root\n            for c in prefix:\n                if c not in cur.childern:return False\n                cur=cur.childern[c]\n            return True\n \n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"notes":"","topic_tags":[]}