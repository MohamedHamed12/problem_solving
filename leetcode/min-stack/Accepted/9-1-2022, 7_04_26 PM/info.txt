{"id":788975463,"lang":"python3","lang_name":"Python3","time":"2Â months","timestamp":1662051866,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/788975463/","is_pending":"Not Pending","title":"Min Stack","memory":"18.1 MB","code":"class MinStack:\n\n    def __init__(self):\n        self.lst=[]\n        self.slst=[]\n        self.m=float('inf')\n        \n\n    def push(self, val: int) -> None:\n        self.lst.append(val)\n        insort(self.slst,val)\n        self.m=min(self.m,val)\n        \n\n    def pop(self) -> None:\n        \n        mm=self.lst.pop()\n        del self.slst[bisect_right(self.slst,mm)-1]\n        \n\n    def top(self) -> int:\n        return self.lst[-1]\n\n    def getMin(self) -> int:\n        return self.slst[0]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"notes":"","topic_tags":[]}