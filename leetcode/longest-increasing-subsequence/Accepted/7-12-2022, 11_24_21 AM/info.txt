{"id":745049572,"lang":"python3","lang_name":"Python3","time":"3 months, 3 weeks","timestamp":1657617861,"status":10,"status_display":"Accepted","runtime":"7977 ms","url":"/submissions/detail/745049572/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"14.3 MB","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:  # Time: O(n*n) and Space: O(n)\n\n        LIS = [1] * len(nums)  # in LIS we will store the longest increasing subsequence from that index to the last index\n\n        for i in range(len(nums) - 1, -1, -1):        # staring from the last index, cause LIS[last] = 1 is the base case \n            for j in range(i + 1, len(nums)):         # staring from the last+1 index, will run for nums-1 times\n                if nums[i] < nums[j]:                 # if i < i+1 satisfies the LIS condition \n                    LIS[i] = max(LIS[i], 1 + LIS[j])  # then choose the max from i or 1(where 1 indicates i index) + i+1 \n\t\t\t\t\t\n        return max(LIS)  ","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"notes":"","topic_tags":[]}