{"id":800499368,"lang":"python3","lang_name":"Python3","time":"1 month, 3 weeks","timestamp":1663251510,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/800499368/","is_pending":"Not Pending","title":"Course Schedule II","memory":"17.3 MB","code":"class Solution:\n    def findOrder(self, n: int, lst: List[List[int]]) -> List[int]:\n        # if not lst:return []\n    \n        graph=defaultdict(list)\n        for u,v in lst:\n            graph[v].append(u)\n        def detect():\n           visit=[False]*n\n           stack=[False]*n\n           def util(u):\n               visit[u] = True\n               stack[u]=True\n               for v in graph[u]:\n                   if not visit[v]:\n                       if util(v):return True\n                   if stack[v]:return True\n\n               stack[u] = False\n\n           for i in range( n):\n               if not visit[i]:\n                   if util(i) :return True\n           return False\n\n\n        if detect():return []\n    \n        def topologicalSort():\n             visit=[False]*n\n             stack=[]\n             def util(u):\n                visit[u] = True\n                for v in graph[u]:\n                    if not  visit[v]:util(v)\n                stack.append(u)\n\n\n             for i in range(n):\n                    if not visit[i]:util(i)\n             return stack[::-1]\n        return   topologicalSort()\n\n# class Solution:\n#     def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n#        d={}\n#        for i in range(numCourses):\n#             d[i]=[]\n#        for u,v in prerequisites:\n#             d[u].append(v)\n#        l=[]\n#        visit=set()\n       \n#        def dfs(element):\n\n         \n\n\n#           if d[element]==[]:\n#               if element not in l: l.append(element)\n#               return True\n#           if element in visit:return False\n#           visit.add(element)\n          \n          \n#           for item in d[element]:\n#                 if not dfs(item):return False\n#           l.append(element)\n         \n#           visit.remove(element)\n#           d[element]=[]\n#           return True\n#        for i in range(numCourses):\n#            if not dfs(i):return []\n#            # for j in teml:\n#            #    if j not in l:l.append(j)\n#            # teml.clear()\n#        return l\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"notes":"","topic_tags":[]}