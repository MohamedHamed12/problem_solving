{"id":771853561,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1660306052,"status":10,"status_display":"Accepted","runtime":"1170 ms","url":"/submissions/detail/771853561/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"18.7 MB","code":"class Solution:\n    def longestIncreasingPath(self, mat: List[List[int]]) -> int:\n        index=[[1,0],[0,1],[-1,0],[0,-1]]\n        cache={}\n        mx=0\n        n=len(mat);m=len(mat[0])\n        def valid(i,j):\n                if i<n and i>=0 and j>=0 and j< m :return True #and l[i][j]==1 and visit[i][j]\n                return  False\n        def dfs(i,j,old):\n            if not valid(i,j):return 0\n            if mat[i][j]<=old: return 0\n            if (i,j) in cache:return cache[(i,j)]\n            tmp=0\n            for u,v in index:\n                k=i+u;h=j+v\n\n                tmp=max(tmp,dfs(k,h,mat[i][j]))\n            cache[(i,j)]=tmp+1\n            return cache[(i,j)]\n\n        for i in range(n):\n            for j in range(m):\n               mx=max(mx,dfs(i,j,-1))\n        return mx","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"notes":"","topic_tags":[]}