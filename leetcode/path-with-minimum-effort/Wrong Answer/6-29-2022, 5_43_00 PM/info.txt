{"id":734349568,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1656517380,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/734349568/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"N/A","code":"from sys import maxsize\n\n\nclass Solution:\n    def minimumEffortPath(self, grid) :\n\n\n\n\n\n        n=len(grid)\n        cost=[[maxsize]*n for i in range(n)]\n        visit=[[True]*n for i in range(n)]\n\n        def vald(i,j):\n            if i<n and i>=0 and  j<n and j>=0 and visit[i][j]:\n                return True\n            else:\n                return False\n\n       \n        q=[[0,0]]\n        cost[0][0]=grid[0][0]\n        while q:\n            h,k=q.pop()\n            if vald(h+1,k)  :\n                    q.append([h+1,k]) \n                    cost[h+1][k]=min(cost[h+1][k],abs(grid[h+1][k]-grid[h][k]))\n            if  vald(h,k+1)  :\n                    q.append([h,k+1])  \n                    cost[h][k+1]=min(cost[h][k+1],abs(grid[h][k+1]-grid[h][k]))\n            if vald(h-1,k)  :\n                    q.append([h-1,k]) \n                    cost[h-1][k]=min(cost[h-1][k],abs(grid[h-1][k]-grid[h][k]))\n            if vald(h,k-1) :\n                    q.append([h,k-1])  \n                    cost[h][k-1]=min(cost[h][k-1],abs(grid[h][k-1]-grid[h][k]))\n            visit[h][k]=False\n        return cost[n-1][n-1]\n        ","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"path-with-minimum-effort","has_notes":false,"notes":"","topic_tags":[]}