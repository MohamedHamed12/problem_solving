{"id":788705550,"lang":"python3","lang_name":"Python3","time":"2Â months","timestamp":1662025759,"status":10,"status_display":"Accepted","runtime":"2419 ms","url":"/submissions/detail/788705550/","is_pending":"Not Pending","title":"Minimum Cost to Cut a Stick","memory":"14.3 MB","code":"# class Solution:\n#     def minCost(self, lenght: int, lst: List[int]) -> int:\n         \n#             n = len(lst)\n#             lst = sorted(lst)\n#             lst.insert(0, 0)\n#             lst.append(lenght)\n#             cache = {}\n#             @lru_cache(maxsize=8192)\n#             def dfs(l, r):\n#                 if (l, r) in cache:\n#                     return cache[(l, r)]\n#                 if r-l == 1:\n#                     return 0\n#                 ans = float('inf')\n#                 for i in range(len(lst)):\n#                     if i > l and i < r:\n#                         ans = min(ans, dfs(l, i)+dfs(i, r)+lst[r]-lst[l])\n#                 cache[(l, r)] = ans\n#                 return ans\n#             return dfs(0, n+1)\nclass Solution:\n    def minCost(self, n: int, cuts: List[int]) -> int:\n        cuts.extend([0,n])\n        cuts.sort()\n        l = len(cuts)\n        dp = [[float('inf')]*l for _ in range(l)]\n        for i in range(l):\n            for j in range(2):\n                if i+j < l:\n                    dp[i][i+j] = 0\n        for k in range(2,l):\n            for i in range(l-k):\n                for j in range(i+1,i+k):\n                    dp[i][i+k] = min(dp[i][i+k],cuts[i+k]-cuts[i]+dp[i][j]+dp[j][i+k])\n        return dp[0][l-1]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-cut-a-stick","has_notes":false,"notes":"","topic_tags":[]}