{"id":770776806,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1660193124,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/770776806/","is_pending":"Not Pending","title":"Coin Change","memory":"N/A","code":"class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp=[amount+1]*((amount)+1)\n        dp[0]=0\n        \n        for i in range(1,len(dp)):\n            for c in coins:\n                if i-c>=0:\n                  dp[i]=min(dp[i],1+dp[i-c])\n        return dp[-1] if dp[-1]!=amount else -1\n#         reachableAmount = 1 << amount\n#         count = 0\n\n#         while reachableAmount & 1 == 0:\n            \n#             reachableAmount_backup = reachableAmount\n            \n#             for coin in coins:\n#                 reachableAmount |= reachableAmount_backup >> coin\n                \n#             if reachableAmount == reachableAmount_backup:\n#                 return -1\n            \n#             count += 1\n        \n#         return count\n    \n# def main():\n#     obj = Solution()\n#     ans = obj.coinChange([1,2,5], 11)\n    \n# main()\n\n# class Solution:\n#     def coinChange(self, coins: List[int], amount: int) -> int:\n#         def _coinChange(coins, amount, memo):\n#             if amount in memo:\n#                 return memo[amount]\n#             if amount == 0:\n#                 return 0\n#             if amount < 0:\n#                 return float('inf')\n#             min_coins = float('inf')\n#             for coin in coins:\n#                 num_coins = 1 + _coinChange(coins, amount - coin, memo)\n#                 min_coins = min(min_coins, num_coins)\n#             memo[amount]= min_coins\n#             return min_coins\n        \n#         ans = _coinChange(coins, amount, {})\n#         if ans == float('inf'):\n#             return -1\n#         else:\n#             return ans\n# class Solution:\n#      def coinChange(self, coins: List[int], amount: int) -> int:\n#         dp = [amount + 1] * (amount + 1)\n#         dp[0] = 0\n        \n#         for a in range (1, amount + 1):\n#             for c in coins:\n#                 if (a - c) >= 0:\n#                     dp[a] = min(dp[a], 1 + dp[a-c])\n#         return dp[amount] if dp[amount] != amount + 1 else -1\n#     def coinChange(self, l,n) :\n#           # l=sorted(l)\n#           if n==0:return 0\n#           tot=[float('inf')]*(n+1) \n#           for i in l:\n#             for j in range(n+1):\n\n#                 if j<i:continue\n#                 elif i==j:tot[j]=1\n#                 else:tot[j]=min(tot[j],1+tot[j-i])\n#           return tot[-1] if tot[-1]!=float('inf') else -1\n#         # l=sorted(l)\n#         # tot=0\n#         # for i in l[::-1]:\n#         #     tot+=c//i\n#         #     c=c%i\n#         #     if c==0:return tot\n#         # if c==0:return tot\n#         # else:return -1\n","compare_result":"100000100011001100011111111111111111111111110111101111101111101110111011111111111111111111111111111111110111111100111111111111111111111111111111111111111111111111111111011111111111111001000","title_slug":"coin-change","has_notes":false,"notes":"","topic_tags":[]}