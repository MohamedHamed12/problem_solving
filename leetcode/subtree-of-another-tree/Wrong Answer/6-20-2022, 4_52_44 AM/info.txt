{"id":726388382,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1655693564,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/726388382/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        ch=False\n        def check(root,subRoot):\n            # if root or subRoot:\n                nonlocal ch\n                if not (root and  subRoot ):\n                    \n                    ch =False\n                    return\n                if root.val != subRoot.val:\n                    ch =False\n                    return\n                if  subRoot.left :\n                    path(root.left,subRoot.left )\n                if   subRoot.right:\n                    path(root.right,subRoot.right)\n                \n            # else:\n            #     ch=False\n            #     return\n                \n                \n        def path(root,subRoot):\n            nonlocal ch\n            # nonlocal check\n            if ch :\n                return\n            if not root:\n                return\n            if root.val==subRoot.val:\n                \n                ch=True\n                check(root,subRoot)\n                if ch :\n                    return \n            path(root.left,subRoot)\n            path(root.right,subRoot)\n        path(root,subRoot)\n        return ch\n        ","compare_result":"10011110000110000000010000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110010000000001011110000010001100000000010110010000","title_slug":"subtree-of-another-tree","has_notes":false,"notes":"","topic_tags":[]}