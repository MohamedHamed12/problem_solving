{"id":727748136,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1655830468,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/727748136/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"15.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nch=False\nclass Solution:\n     def isSubtree(self, root, subRoot) :\n            \n            if not subRoot :return True \n            if not root :return False\n            \n            if root.val==subRoot.val:\n                if  self.check(root,subRoot)==True :\n                    return True \n                \n           \n            o =self.isSubtree(root.left,subRoot)\n           \n            p =self.isSubtree(root.right,subRoot)\n            return o or p\n            \n     def check(self,r,s):\n        if r or s :\n            m=True;n=True\n            if not (r and s):\n                return False\n            if r.val!=s.val:\n                return False\n            # if r.left or s.left:\n            m= self.check(r.left,s.left)\n            # if r.right or s.right:\n            n= self.check(r.right,s.right)\n            return m and n\n        else :\n           return True\n            \n#    \n#             global ch\n#             if not subRoot:\n#                 ch= True\n#                 return \n#             if not  root : \n#                 ch= False\n#                 return\n#             self.path(root,subRoot)\n#             return ch \n#     def ccheck(self,root,subRoot):\n#                 global ch\n#                 # if ch : return\n#                 if not (root and subRoot  ):\n                    \n#                     ch =False\n#                     return\n#                 if root.val != subRoot.val:\n#                     ch =False\n#                     return\n#                 if  subRoot.left or root.left :\n#                     self.ccheck(root.left,subRoot.left )\n#                 if   subRoot.right or root.right:\n#                     self.ccheck(root.right,subRoot.right)\n    \n#     def path(self,root,subRoot):\n#             global ch\n#             if ch :\n#                 return \n          \n#             if root.val==subRoot.val :\n                \n#                 ch=True\n#                 self.ccheck(root,subRoot)\n#                 if  ch :\n#                      return \n#             if root.left:\n#                 self.path(root.left,subRoot)\n#             if root.right:\n#                 self.path(root.right,subRoot)\n            \n         \n        \n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"notes":"","topic_tags":[]}